#### Customize your RecyclerView
You can customize the RecyclerView objects to meet your specific needs. The standard classes provide all
the functionality that most developers will need; in many cases, the only customization you need to
do is design the view for each view holder and write the code to update those views with the appropriate 
data. However, if your app has specific requirements, you can modify the standard behavior in a number of ways. 
The following sections describe some of the other common customizations.

#### Modifying the layout
The RecyclerView uses a layout manager to position the individual items on the screen and determine when to 
reuse item views that are no longer visible to the user. To reuse (or recycle) a view, a layout manager may 
ask the adapter to replace the contents of the view with a different element from the dataset. Recycling 
views in this manner improves performance by avoiding the creation of unnecessary views or performing
expensive findViewById() lookups. The Android Support Library includes three standard layout managers,
each of which offers many customization options:

### LinearLayoutManager
arranges the items in a one-dimensional list. Using a RecyclerView with LinearLayoutManager provides
functionality like the older ListView layout.
GridLayoutManager arranges the items in a two-dimensional grid, like the squares on a checkerboard.
Using a RecyclerView with GridLayoutManager provides functionality like the older GridView layout.
StaggeredGridLayoutManager arranges the items in a two-dimensional grid, with each column slightly
offset from the one before, like the stars in an American flag.
If none of these layout managers suits your needs, you can create your own by extending the
RecyclerView.LayoutManager abstract class.

#### Add item animations
Whenever an item changes, the RecyclerView uses an animator to change its appearance. This animator is an
object that extends the abstract RecyclerView.ItemAnimator class. By default, the RecyclerView uses 
DefaultItemAnimator to provide the animation. If you want to provide custom animations, you can define 
your own animator object by extending RecyclerView.ItemAnimator.

#### Enable list-item selection
The recyclerview-selection library enables users to select items in RecyclerView list using touch or mouse 
input. You retain control over the visual presentation of a selected item. You can also retain control over
policies controlling selection behavior, such as items that can be eligible for selection, and how many items can be selected.

To add selection support to a RecyclerView instance, follow these steps:

Determine which selection key type to use, then build a ItemKeyProvider.
There are three key types that you can use to identify selected items: Parcelable (and all subclasses like Uri), 
String, and Long. For detailed information about selection-key types, see SelectionTracker.Builder.

Implement ItemDetailsLookup.
ItemDetailsLookup enables the selection library to access information about RecyclerView items given a MotionEvent.
It is effectively a factory for ItemDetails instances that are backed up by (or extracted from) a RecyclerView.ViewHolder instance.

Update item Views in RecyclerView to reflect that the user has selected or unselected it.
The selection library does not provide a default visual decoration for the selected items. You must provide this
when you implement onBindViewHolder(). The recommended approach is as follows:


In onBindViewHolder(), call setActivated() (not setSelected()) on the View object with true or
false (depending on if the item is selected).
Update the styling of the view to represent the activated status. We recommend you use a color
state list resource to configure the styling.
Use ActionMode to provide the user with tools to perform an action on the selection.
Register a SelectionTracker.SelectionObserver to be notified when selection changes. When a selection 
is first created, start ActionMode to represent this to the user, and provide selection-specific actions.
For example, you may add a delete button to the ActionMode bar, and connect the back arrow on the bar to
clear the selection. When the selection becomes empty (if the user cleared the selection the last time),
don't forget to terminate action mode.


Perform any interpreted secondary actions
At the end of the event processing pipeline, the library may determine that the user is attempting to activate
an item by tapping it, or is attempting to drag and drop an item or set of selected items. React to these
interpretations by registering the appropriate listener. For more information, see SelectionTracker.Builder.

