### Linked lists

## Linear data structures
If we really want to understand the basics of linked lists, it’s important that we talk
about what type of data structure they are.
One characteristic of linked lists is that they are linear data structures, which means 
that there is a sequence and an order to how they are constructed and traversed. We can 
think of a linear data structure like a game of hopscotch: in order to get to the end 
of the list, we have to go through all of the items in the list in order, or sequentially. 
Linear structures, however, are the opposite of non-linear structures. In non-linear data
structures, items don’t have to be arranged in order, which means that we could traverse
the data structure non-sequentially.

###Memory management
The biggest differentiator between arrays and linked lists is the way that they use memory 
’s just the simplicity of hiding away things that you don’t need to see or deal with all 
of the time. Even if we don’t have to think about memory allocation when we write code, 
if we want to truly understand what’s going on in a linked list and what makes it powerful,
we have to get down to the rudimentary level.
We’ve already learned about binary and how data can be broken up into bits and bytes.
Just as characters, numbers, words, sentences require bytes of memory to represent them, 
so do data structures.
The fundamental difference between arrays and linked lists is that arrays are static data 
structures, while linked lists are dynamic data structures. A static data structure needs 
all of its resources to be allocated when the structure is created; this means that even if 
the structure was to grow or shrink in size and elements were to be added or removed, it 
still always needs a given size and amount of memory. If more elements needed to be added 
to a static data structure and it didn’t have enough memory, you’d need to copy the data of
that array, for example, and recreate it with more memory, so that you could add elements to it.

###Parts of a linked list
A linked list can be small or huge, but no matter the size, the parts that make it up are 
actually fairly simple. A linked list is made up of a series of nodes, which are the elements 
of the list.
The starting point of the list is a reference to the first node, which is referred to as the 
head. Nearly all linked lists must have a head, because this is effectively the only entry
point to the list and all of its elements, and without it, you wouldn’t know where to start! 
The end of the list isn’t a node, but rather a node that points to null, or an empty value.
