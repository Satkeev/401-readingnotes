#### API (GRAPHQL)

Add relationships between types
### @connection
The @connection directive enables you to specify relationships between @model types. Currently, this 
supports one-to-one, one-to-many, and many-to-one relationships. You may implement many-to-many 
relationships using two one-to-many connections and a joining @model type. See the usage section for details.

We also provide a fully working schema with 17 patterns related to relational designs.

Definition
directive @connection(keyName: String, fields: [String!]) on FIELD_DEFINITION
copy
Usage
Relationships between types are specified by annotating fields on an @model object type with the @connection directive.

The fields argument can be provided and indicates which fields can be queried by to get connected objects.
The keyName argument can optionally be used to specify the name of secondary index (an index that was set
up using @key) that should be queried from the other type in the relationship.

When specifying a keyName, the fields argument should be provided to indicate which field(s) will be 
used to get connected objects. If keyName is not provided, then @connection queries the target table’s primary index.

Has one
In the simplest case, you can define a one-to-one connection where a project has one team:

type Project @model {
  id: ID!
  name: String
  team: Team @connection
}

type Team @model {
  id: ID!
  name: String!
}
copy
You can also define the field you would like to use for the connection by populating the first 
argument to the fields array and matching it to a field on the type:

type Project @model {
  id: ID!
  name: String
  teamID: ID!
  team: Team @connection(fields: ["teamID"])
}

type Team @model {
  id: ID!
  name: String!
}
copy
In this case, the Project type has a teamID field added as an identifier for the team that the 
project belongs to. @connection can then get the connected Team object by querying the Team table with this teamID.

After it’s transformed, you can create projects and query the connected team as follows:

mutation CreateProject {
    createProject(input: { name: "New Project", teamID: "a-team-id"}) {
        id
        name
        team {
            id
            name
        }
    }
}
copy
Note The Project.team resolver is configured to work with the defined connection. This is done with 
a query on the Team table where teamID is passed in as an argument.

A Has One @connection can only reference the primary index of a model (ie. it cannot specify a
“keyName” as described below in the Has Many section).

Has many
The following schema defines a Post that can have many comments:

type Post @model {
  id: ID!
  title: String!
  comments: [Comment] @connection(keyName: "byPost", fields: ["id"])
}

type Comment @model
  @key(name: "byPost", fields: ["postID", "content"]) {
  id: ID!
  postID: ID!
  content: String!
}
copy
Note how a one-to-many connection needs an @key that allows comments to be queried by the postID 
and the connection uses this key to get all comments whose postID is the id of the post was called 
on. After it’s transformed, you can create comments and query the connected Post as follows:

mutation CreatePost {
  createPost(input: { id: "a-post-id", title: "Post Title" } ) {
    id
    title
  }
}

mutation CreateCommentOnPost {
  createComment(input: { id: "a-comment-id", content: "A comment", postID: "a-post-id"}) {
    id
    content
  }
}
copy
And you can query a Post with its comments as follows:

query getPost {
  getPost(id: "a-post-id") {
    id
    title
    comments {
      items {
        id
        content
      }
    }
  }
}
