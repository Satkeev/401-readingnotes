#### Spring Boot and OAuth2
This guide shows you how to build a sample app doing various things with "social login"
using OAuth 2.0 and Spring Boot.
It starts with a simple, single-provider single-sign on, and works up to a client with a 
choice of authentication providers: GitHub or Google.
The samples are all single-page apps using Spring Boot and Spring Security on the back end. 
They also all use plain jQuery on the front end. But, the changes needed to convert to a
different JavaScript framework or to use server-side rendering would be minimal.
All samples are implemented using the native OAuth 2.0 support in Spring Boot.
There are several samples building on each other, adding new features at each step:
simple: a very basic static app with just a home page and unconditional login via Spring Boot’s
OAuth 2.0 configuration properties (if you visit the home page, you will be automatically redirected to GitHub).
click: adds an explicit link that the user has to click to login.
logout: adds a logout link as well for authenticated users.
two-providers: adds a second login provider so the user can choose on the home page which one to use.
custom-error: adds an error message for unauthenticated users, and a custom authentication based on GitHub’s API.
The changes needed to migrate from one app to the next one in the feature ladder can be tracked in the
\source code. Each version of the app is its own directory so that you can compare their differences.
Each app can be imported into an IDE. You can run the main method in SocialApplication to start an app.
They all come up with a home page on http://localhost:8080 (and all require that you have at least 
a GitHub and Google account if you want to log in and see the content).
You can also run all the apps on the command line using mvn spring-boot:run or by building the jar 
file and running it with mvn package and java -jar target/*.jar (per the Spring Boot docs and other
available documentation). There is no need to install Maven if you use the wrapper at the top level, e.g.
The apps all work on localhost:8080 because they’ll use OAuth 2.0 clients registered with GitHub and Google 
for that address. To run them on a different host or port, you need to register your apps that way. There i
s no danger of leaking your credentials beyond localhost if you use the default values. But, be careful
what you expose on the Internet, and don’t put your own app registrations in public source control.

####Securing the Application with GitHub and Spring Security
To make the application secure, you can simply add Spring Security as a dependency. Since you’re wanting to
do a "social" login (delegate to GitHub), you should include the Spring Security OAuth 2.0 Client starter:
pom.xml
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-oauth2-client</artifactId>
</dependency>

####Boot Up the Application
With that change, you can run your app again and visit the home page at http://localhost:8080. Now, 
instead of the home page, you should be redirected to login with GitHub. If you do that, and accept
any authorizations you are asked to make, you will be redirected back to the local app, and the home
page will be visible.
If you stay logged in to GitHub, you won’t have to re-authenticate with this local app, even if you
open it in a fresh browser with no cookies and no cached data. (That’s what Single Sign-On means.)
If you are working through this section with the sample application, be sure to clear your browser
cache of cookies and HTTP Basic credentials. The best way to do that for a single server is to
open a new private window.
It’s safe to grant access to this sample since only the app running locally can use the tokens and
the scope it asks for is limited. Be aware of what you are approving when you log into apps like this 
though: They might ask for permission to do more than you are comfortable with (e.g. they might ask
for permission to change your personal data, which is unlikely to be in your interest).

###Add a Logout Button
In this section, we modify the click app we built by adding a button that allows the user to log out
of the app. This seems like a simple feature, but it requires a bit of care to implement, so it’s worth
spending some time discussing exactly how to do it. Most of the changes are to do with the fact that 
we are transforming the app from a read-only resource to a read-write one (logging out requires a state change), 
so the same changes would be needed in any realistic application that wasn’t just static content.

###Client Side Changes
On the client, we just need to provide a logout button and some JavaScript to call back to the server 
to ask for the authentication to be cancelled. First, in the "authenticated" section of the UI, we add the button:

