### Files and directories  
You can use the types in the System.IO namespace to interact with files and directories.
For example, you can get and set properties for files and directories, and retrieve
collHere are some commonly used file and directory classes:

File - provides static methods for creating, copying, deleting, moving, and opening files,
and helps create a FileStream object.
FileInfo - provides instance methods for creating, copying, deleting, moving, and opening files, 
and helps create a FileStream object.
Directory - provides static methods for creating, moving, and enumerating through directories 
and subdirectories.
DirectoryInfo - provides instance methods for creating, moving, and enumerating through
directories and subdirectories.
Path - provides methods and properties for processing directory strings in a cross-platform 
manner.ections of files and directories based on search criteria.

### Streams
The abstract base class Stream supports reading and writing bytes. All classes that represent
streams inherit from the Stream class. The Stream class and its derived classes provide a common
view of data sources and repositories, and isolate the programmer from the specific details of
the operating system and underlying devices.
Streams involve three fundamental operations:
Reading - transferring data from a stream into a data structure, such as an array of bytes.
Writing - transferring data to a stream from a data source.
Seeking - querying and modifying the current position within a stream.

### Readers and writers
BinaryReader and BinaryWriter – for reading and writing primitive data types as binary values.
StreamReader and StreamWriter – for reading and writing characters by using an encoding 
value to convert the characters to and from bytes.
StringReader and StringWriter – for reading and writing characters to and from strings.
TextReader and TextWriter – serve as the abstract base classes for other readers and writers
that read and write characters and strings, but not binary data.

###Asynchronous I/O operations
Reading or writing a large amount of data can be resource-intensive. You should perform these
tasks asynchronously if your application needs to remain responsive to the user. With synchronous 
I/O operations, the UI thread is blocked until the resource-intensive operation has completed.
Use asynchronous I/O operations when developing Windows 8.x Store apps to prevent creating
the impression that your app has stopped working.
The asynchronous members contain Async in their names, such as the CopyToAsync, FlushAsync, ReadAsync,
and WriteAsync methods. You use these methods with the async and await keywords.

###Compression
Compression refers to the process of reducing the size of a file for storage. Decompression is the 
process of extracting the contents of a compressed file so they are in a usable format. The System.IO.
Compression namespace contains types for compressing and decompressing files and streams.

The following classes are frequently used when compressing and decompressing files and streams:

ZipArchive – for creating and retrieving entries in the zip archive.

ZipArchiveEntry – for representing a compressed file.

ZipFile – for creating, extracting, and opening a compressed package.

ZipFileExtensions – for creating and extracting entries in a compressed package.

DeflateStream – for compressing and decompressing streams using the Deflate algorithm.

GZipStream – for compressing and decompressing streams in gzip data format.

See How to: Compress and Extract Files.

Isolated storage
Isolated storage is a data storage mechanism that provides isolation and safety by defining standardized 
ways of associating code with saved data. The storage provides a virtual file system that is isolated by 
user, assembly, and (optionally) domain. Isolated storage is particularly useful when your application
does not have permission to access user files. You can save settings or files for your application in 
a manner that is controlled by the computer's security policy.


Isolated storage is not available for Windows 8.x Store apps; instead, use application data classes
in the Windows.Storage namespace. For more information, see Application data.

The following classes are frequently used when implementing isolated storage:

IsolatedStorage – provides the base class for isolated storage implementations.

IsolatedStorageFile – provides an isolated storage area that contains files and directories.

IsolatedStorageFileStream - exposes a file within isolated storage.

