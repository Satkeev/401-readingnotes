####Spring

###What You Will Build
You will build an application that has a static home page and that will also accept HTTP GET 
requests at: http://localhost:8080/greeting.
It will respond with a web page that displays HTML. The body of the HTML will contain a
greeting: “Hello, World!”
You can customize the greeting with an optional name parameter in the query string. The URL
might then be http://localhost:8080/greeting?name=User.
The name parameter value overrides the default value of World and is reflected in the response
by the content changing to “Hello, User!”

###What You Need

A favorite text editor or IDE
JDK 1.8 or later
Gradle 4+ or Maven 3.2+
You can also import the code straight into your IDE:
Spring Tool Suite (STS)
IntelliJ IDEA

###How to complete this guide
Like most Spring Getting Started guides, you can start from scratch and complete each step or
you can bypass basic setup steps that are already familiar to you. Either way, you end up with working code.
To start from scratch, move on to Starting with Spring Initializr.
To skip the basics, do the following:
Download and unzip the source repository for this guide, or clone it using 
Git: git clone https://github.com/spring-guides/gs-serving-web-content.git
cd into gs-serving-web-content/initial
Jump ahead to Create a Web Controller.
When you finish, you can check your results against the code in gs-serving-web-content/complete.

###Spring Boot Devtools
A common feature of developing web applications is coding a change, restarting your application, 
and refreshing the browser to view the change. This entire process can eat up a lot of time. To
speed up this refresh cycle, Spring Boot offers with a handy module known as spring-boot-devtools. 
Spring Boot Devtools:
Enables hot swapping.
Switches template engines to disable caching.
Enables LiveReload to automatically refresh the browser.
Other reasonable defaults based on development instead of production.

###Run the Application
The Spring Initializr creates an application class for you. In this case, you need not further 
modify the class provided by the Spring Initializr. The following listing
(from src/main/java/com/example/servingwebcontent/ServingWebContentApplication.java) shows the application class:
package com.example.servingwebcontent;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
@SpringBootApplication
public class ServingWebContentApplication {
    public static void main(String[] args) {
        SpringApplication.run(ServingWebContentApplication.class, args);
    }
}COPY
@SpringBootApplication is a convenience annotation that adds all of the following:
@Configuration: Tags the class as a source of bean definitions for the application context.

@EnableAutoConfiguration: Tells Spring Boot to start adding beans based on classpath settings,
other beans, and various property settings. For example, if spring-webmvc is on the classpath,
this annotation flags the application as a web application and activates key behaviors, such as 
setting up a DispatcherServlet.
@ComponentScan: Tells Spring to look for other components, configurations, and services in the
com/example package, letting it find the controllers.
The main() method uses Spring Boot’s SpringApplication.run() method to launch an application.
Did you notice that there was not a single line of XML? There is no web.xml file, either. This 
web application is 100% pure Java and you did not have to deal with configuring any plumbing or infrastructure.

###Build an executable JAR
You can run the application from the command line with Gradle or Maven. You can also build a single executable 
JAR file that contains all the necessary dependencies, classes, and resources and run that. Building an executable
jar makes it easy to ship, version, and deploy the service as an application throughout the development lifecycle, 
across different environments, and so forth.
If you use Gradle, you can run the application by using ./gradlew bootRun. Alternatively, you can build the 
JAR file by using ./gradlew build and then run the JAR file, as follows:

java -jar build/libs/gs-serving-web-content-0.1.0.jar
If you use Maven, you can run the application by using ./mvnw spring-boot:run. Alternatively, you can build
the JAR file with ./mvnw clean package and then run the JAR file, as follows:
java -jar target/gs-serving-web-content-0.1.0.jar
